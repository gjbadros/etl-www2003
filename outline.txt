$Id$

30 word statement of contribution:

The Extensible Templating Language is a web templating language that
maintains power and expressiveness without relinquishing static
analyzability, thus reducing costs and increasing quality by
eliminating whole classes of errors.


Abstract:

TBD

* Introduction

** Importance of dynamic web applications

** General problem statement
*** focus was making easy things easy & fast
*** often at the expense of long-term understandability & maintainability
*** complicates evolution of the systems
*** testing costs and fire-fighting can dominate such systems
*** analogy to dynamic vs. static languages
*** flexibility & power vs. analyzability (everpresent but underappreciated balance)
*** static checking can help

** Outline of paper paragraph


* Background

** Server-side web applications
*** dominant form of new applications over the last 6 years
*** varieties of browsers (i.e., clients) complicates development and testing
***-> have to deal with their different capabilities, quirks
      (e.g., browserhawk)
*** device varieties (as well as markup varieties) is only getting worse
***-> e.g., wireless devices and markups, other XML dialects

** Existing templating strategies & their problems
*** raw programming approach (CGI, servlets) & their problems
*** templating approach (PHP, mod_perl, JSP) & their problems
**** mixed
**** pure (using custom tags [jsp] or custom controls [asp.net])
*** restricted templating approach
**** XML-based (XSLT)
**** Text-based (ESI)
*** Embedding markup in language (see also related work section)
**** Scheme -- LAML (HTML & XML)
**** Haskell
**** New domain-specific languages -- Latte

** Summary of approaches and weaknesses
*** reference related work section for other approaches


* A better approach: ETL

** goals, design principles
*** increase the probability that a program that checks does the right thing
*** reduce development cycle time, greatly reduce testing costs
*** approximate analyses should be easy, precise analyses should be possible
    (e.g., finding all the variables used by a template)

** language features: slots, types, custom tags via XSLT, XML-typed variables, cobranding
*** literal markup (cf XSLT)
*** primitives (with slots, attributes, values)
*** variables (string, xml) and buckets
*** reserved variables
*** transformers
*** custom tag rewriting via XSLT
*** profile variables and user variables
*** cobranding template resolution
*** whitespace handling


* Benefits of ETL (Examples)
** development environment completion
** validation for deep checking before deployment
** analysis 
** pretty-printing 
** source->source transformation 
** new abstractions 
** reduce app-level security holes (ref. scott & sharp)


* Implementation

** ETLS, its goals, backward-compatibility needs

** Server principles
*** be an appliance box: everything via HTTP
*** support MS management interfaces (mmc, win* service)

** screenshot of admin pages

** perf numbers (? omit this ?)



* Related work (mentioned briefly in background)

** LAML

** Haskell

** JavaML

** Simonyi's IP

** Scott & Sharp (used a reverse-proxy approach to get some of the same benefits)


* Future work
** XML infoset and non-infoset artifacts
*** a bit problematic for source->source and for representing literal markup
** alternate syntax (a la stylescript) for other purposes
*** importantly, has an implied XML data model (e.g., can be algorithmically turned into the other syntax)
** math and conditionals
** generalized content-slot
** improvements to XSD to enable better validation
*** e.g., either/or attributes for slots
*** custom tag element definitions
** levels of strictness
** taint tracking of input variables
** better warning/error reporting in terms of the pre-macro-transformed source template



* Conclusion

** benefits

** contribution


* Acks


* References
